using UnityEngine;
using System;

namespace GameDataEditor
{
    public class GDECodeGenConstants
    {
        public static string ClassFileDefaultPath = "CustomExtensions/";
		public static string ClassFileNameFormat = "{0}.cs";
		public static string StaticSchemaKeysFileName = "GDESchemaKeys_{0}.cs";
		public static string StaticItemKeysFileName = "GDEItemKeys_{0}.cs";
		public static string DataClassNameFormat = "GDE{0}Data";

		public static string CryptoFilePath = "Encryption/Resources/" + GDMConstants.MetaDataFileName + ".bytes";
		public static string EncryptedDataFileSuffix = "_enc.bytes";

		public static string AutoGenMsg = @"// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      {0}
//  </autogenerated>
// ------------------------------------------------------------------------------";

		public static string StaticItemKeyClassHeader = @"using UnityEngine;
using System;

namespace GameDataEditor
{
    public partial class GDEItemKeys
    {";

		public static string StaticSchemaKeyClassHeader = @"using UnityEngine;
using System;

namespace GameDataEditor
{
    public partial class GDESchemaKeys
    {";

        public static string DataClassHeader = @"using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{";

        public static string ClassDeclarationFormat = @"public class {0} : IGDEData";
		public static string ClassConstructorsFormat = @"public {0}(string key) : base(key)
        {{
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }}";

        public static string LoadDictMethod = @"public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{";

		public static string LoadDictMethodEnd = @"LoadFromSavedData(dataKey);
			}
		}";

		public static string LoadFromSavedMethod = @"public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			";

		public static string LoadFromSavedMethodEnd = @"}";

		public static string VariableFormat = @"static string {1}Key = ""{1}"";
		{0} _{1};
        public {0} {1}
        {{
            get {{ return _{1}; }}
            set {{
                if (_{1} != value)
                {{
                    _{1} = value;
					GDEDataManager.Set{2}(_key, {1}Key, _{1});
                }}
            }}
        }}";

		public static string LoadVariableFormat = @"dict.TryGet{0}({1}Key, out _{1});";

		public static string LoadSavedVarFormat = @"_{1} = GDEDataManager.Get{0}(_key, {1}Key, _{1});";

		public static string LoadVariableListFormat = @"dict.TryGet{0}List({1}Key, out {1});";
		public static string LoadSavedVariableListFormat = @"{1} = GDEDataManager.Get{0}List(_key, {1}Key, {1});";

		public static string StaticSchemaKeyFormat = "public static string {0} = \"{0}\";";
		public static string StaticItemKeyFormat = "public static string {0}_{1} = \"{1}\";";

		public static string OneDListVariableFormat = @"static string {1}Key = ""{1}"";
		public List<{0}>      {1};
		public void Set_{1}()
        {{
	        GDEDataManager.Set{2}List(_key, {1}Key, {1});
		}}
		";

		public static string TwoDListVariableFormat = @"static string {1}Key = ""{1}"";
		public List<List<{0}>>      {1};
		public void Set_{1}()
		{{
			GDEDataManager.Set{2}List(_key, {1}Key, {1});
		}}
		";

        public static string TwoDListSuffix = "TwoD";

        public static string TempStringKeyDeclaration = "string customDataKey;";
		public static string LoadCustomVariableFormat = @"dict.TryGetString({1}Key, out customDataKey);
				_{1} = new {0}(customDataKey);";

		public static string LoadSavedCustomVariableFormat = "_{1} = GDEDataManager.Get{0}(_key, {1}Key, _{1});";

        public static string ResetAllDeclaration = @"public void ResetAll()
        {";

		public static string ResetToDefaultFormat = "GDEDataManager.ResetToDefault(_key, {0}Key);";
		public static string CustomResetAllFormat = "Reset_{0}();";

		public static string ResetCustomFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString({1}Key, out customDataKey);
			_{1} = new {0}(customDataKey);

			{1}.ResetAll();
		}}";

		public static string ResetCustom1DListFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList({1}Key, out {1});
			{1} = GDEDataManager.GetCustomList(_key, {1}Key, {1});

			{1}.ForEach(x => x.ResetAll());
		}}";

		public static string ResetCustom2DListFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomTwoDList({1}Key, out {1});
			{1} = GDEDataManager.GetCustomTwoDList(_key, {1}Key, {1});

			{1}.ForEach(x => x.ForEach(y => y.ResetAll()));
		}}";

		public static string CustomListResetAllFormat = "Reset_{0}();";

        public static string ResetAllEndMethod = @"Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }";

        public static string ResetVariableDeclarationFormat = @"public void Reset_{0}()
        {{
            GDEDataManager.ResetToDefault(_key, {0}Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGet{1}({0}Key, out _{0});
        }}";

		public static string ResetListVariableDeclarationFormat = @"public void Reset_{0}()
        {{
	        GDEDataManager.ResetToDefault(_key, {0}Key);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGet{1}List({0}Key, out {0});
        }}
		";

		public static string SaveToDictMethod = @"public override Dictionary<string, object> SaveToDict()
		{{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, ""{0}"");
			";

		public static string SaveToDictVarFormat = @"dict.Merge(true, {0}.ToGDEDict({0}Key));";

		public static string SaveToDictEnd = @"return dict;
		}";

        public static string UpdateCustomItemsMethod = @"public override void UpdateCustomItems(bool rebuildKeyList)
        {{";

        public static string UpdateCustomItemsFormat = @"GDEDataManager.UpdateItem({0}, rebuildKeyList);
            {0}.UpdateCustomItems(rebuildKeyList);";

        public static string UpdateCustomItemsListFormat = @"if ({0} != null)
            {{
                for(int x=0;  x<{0}.Count;  x++)
                {{
                    GDEDataManager.UpdateItem({0}[x], rebuildKeyList);
                    {0}[x].UpdateCustomItems(rebuildKeyList);
                }}
            }}";


        public static string UpdateCustomItemsTwoDListFormat = @"if ({0} != null)
            {{
                for(int x=0;  x<{0}.Count;  x++)
                {{
                    if ({0}[x] != null)
                    {{
                        for(int y=0;  y<{0}[x].Count;  y++)
                        {{  
                            GDEDataManager.UpdateItem({0}[x][y], rebuildKeyList);
                            {0}[x][y].UpdateCustomItems(rebuildKeyList);
                        }}
                    }}
                }}
            }}";

        public static string UpdateCustomItemsEnd = "}";

		public static string ShallowCloneMethodStart = @"public GDE{0}Data ShallowClone()
		{{
			string newKey = Guid.NewGuid().ToString();
			GDE{0}Data newClone = new GDE{0}Data(newKey);";

		public static string DeepCloneMethodStart = @"public GDE{0}Data DeepClone()
		{{
			GDE{0}Data newClone = ShallowClone();";


		public static string GetDict = @"Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);";

		public static string BasePathVar = @"string path;";
		public static string ListPathVar = @"List<string> pathList;";
		public static string TwoDListPathVar = @"List<List<string>> path2DList;";

		public static string SaveGOPathFormat = @"dict.TryGetString({0}Key, out path);
			GDEDataManager.SetString(newClone.Key, {0}Key, path);";

		public static string SaveGOListPathFormat = @"dict.TryGetStringList({0}Key, out pathList);
			GDEDataManager.SetStringList(newClone.Key, {0}Key, pathList);";

		public static string SaveGO2DListPathFormat = @"dict.TryGetStringTwoDList({0}Key, out path2DList);
			GDEDataManager.SetStringTwoDList(newClone.Key, {0}Key, path2DList);";

		public static string BaseTypeCloneFormat = @"newClone.{0} = {0};";
		public static string CustomTypeShallowFormat = BaseTypeCloneFormat;
		public static string CustomTypeDeepFormat = "newClone.{0} = {0}.DeepClone();";

		public static string ListTypeCloneFormat = @"newClone.{0} = new List<{1}>({0});
			newClone.Set_{0}();";
		public static string CustomListTypeDeepCloneFormat = @"newClone.{0} = new List<{1}>();
			if ({0} != null)
			{{
				foreach(var val in {0})
					newClone.{0}.Add(val.DeepClone());
			}}
			newClone.Set_{0}();";

		public static string TwoDListTypeCloneFormat = @"newClone.{0} = new List<List<{1}>>({0});
			newClone.Set_{0}();";

		public static string CustomTwoDListTypeDeepCloneFormat = @"newClone.{0} = new List<List<{1}>>();
			if ({0} != null)
			{{
				foreach(var sublist in {0})
				{{
					var newSubList = new List<{1}>();
					if (sublist != null)
					{{
						foreach(var val in sublist)
							newSubList.Add(val.DeepClone());
					}}
					newClone.{0}.Add(newSubList);
				}}
			}}
			newClone.Set_{0}();";

		public static string CloneMethodEnd = @"return newClone;
		}";

        public static int IndentLevel1 = 4;
        public static int IndentLevel2 = IndentLevel1 * 2;
        public static int IndentLevel3 = IndentLevel1 * 3;
		public static int IndentLevel4 = IndentLevel1 * 4;
    }
}
