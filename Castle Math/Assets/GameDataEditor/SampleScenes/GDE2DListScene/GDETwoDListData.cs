// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Projects/gde_unity_4.5/Assets/GameDataEditor/SampleScenes/GDE2DListScene/Resources/2dlist_scene_data.json
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDETwoDListData : IGDEData
    {
        static string bKey = "b";
		public List<List<bool>>      b;
		public void Set_b()
		{
			GDEDataManager.SetBoolTwoDList(_key, bKey, b);
		}
		
        static string iKey = "i";
		public List<List<int>>      i;
		public void Set_i()
		{
			GDEDataManager.SetIntTwoDList(_key, iKey, i);
		}
		
        static string fKey = "f";
		public List<List<float>>      f;
		public void Set_f()
		{
			GDEDataManager.SetFloatTwoDList(_key, fKey, f);
		}
		
        static string sKey = "s";
		public List<List<string>>      s;
		public void Set_s()
		{
			GDEDataManager.SetStringTwoDList(_key, sKey, s);
		}
		
        static string v2Key = "v2";
		public List<List<Vector2>>      v2;
		public void Set_v2()
		{
			GDEDataManager.SetVector2TwoDList(_key, v2Key, v2);
		}
		
        static string v3Key = "v3";
		public List<List<Vector3>>      v3;
		public void Set_v3()
		{
			GDEDataManager.SetVector3TwoDList(_key, v3Key, v3);
		}
		
        static string v4Key = "v4";
		public List<List<Vector4>>      v4;
		public void Set_v4()
		{
			GDEDataManager.SetVector4TwoDList(_key, v4Key, v4);
		}
		
        static string cKey = "c";
		public List<List<Color>>      c;
		public void Set_c()
		{
			GDEDataManager.SetColorTwoDList(_key, cKey, c);
		}
		
        static string goKey = "go";
		public List<List<GameObject>>      go;
		public void Set_go()
		{
			GDEDataManager.SetUnityObjectTwoDList(_key, goKey, go);
		}
		
        static string texKey = "tex";
		public List<List<Texture2D>>      tex;
		public void Set_tex()
		{
			GDEDataManager.SetUnityObjectTwoDList(_key, texKey, tex);
		}
		
        static string matKey = "mat";
		public List<List<Material>>      mat;
		public void Set_mat()
		{
			GDEDataManager.SetUnityObjectTwoDList(_key, matKey, mat);
		}
		
        static string audKey = "aud";
		public List<List<AudioClip>>      aud;
		public void Set_aud()
		{
			GDEDataManager.SetUnityObjectTwoDList(_key, audKey, aud);
		}
		

        static string cusKey = "cus";
		public List<List<GDETwoDListCustomData>>      cus;
		public void Set_cus()
		{
			GDEDataManager.SetCustomTwoDList(_key, cusKey, cus);
		}
		

        public GDETwoDListData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "TwoDList");
			
            dict.Merge(true, b.ToGDEDict(bKey));
            dict.Merge(true, i.ToGDEDict(iKey));
            dict.Merge(true, f.ToGDEDict(fKey));
            dict.Merge(true, s.ToGDEDict(sKey));
            dict.Merge(true, v2.ToGDEDict(v2Key));
            dict.Merge(true, v3.ToGDEDict(v3Key));
            dict.Merge(true, v4.ToGDEDict(v4Key));
            dict.Merge(true, c.ToGDEDict(cKey));
            dict.Merge(true, go.ToGDEDict(goKey));
            dict.Merge(true, tex.ToGDEDict(texKey));
            dict.Merge(true, mat.ToGDEDict(matKey));
            dict.Merge(true, aud.ToGDEDict(audKey));

            dict.Merge(true, cus.ToGDEDict(cusKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            if (cus != null)
            {
                for(int x=0;  x<cus.Count;  x++)
                {
                    if (cus[x] != null)
                    {
                        for(int y=0;  y<cus[x].Count;  y++)
                        {  
                            GDEDataManager.UpdateItem(cus[x][y], rebuildKeyList);
                            cus[x][y].UpdateCustomItems(rebuildKeyList);
                        }
                    }
                }
            }
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBoolTwoDList(bKey, out b);
                dict.TryGetIntTwoDList(iKey, out i);
                dict.TryGetFloatTwoDList(fKey, out f);
                dict.TryGetStringTwoDList(sKey, out s);
                dict.TryGetVector2TwoDList(v2Key, out v2);
                dict.TryGetVector3TwoDList(v3Key, out v3);
                dict.TryGetVector4TwoDList(v4Key, out v4);
                dict.TryGetColorTwoDList(cKey, out c);
                dict.TryGetGameObjectTwoDList(goKey, out go);
                dict.TryGetTexture2DTwoDList(texKey, out tex);
                dict.TryGetMaterialTwoDList(matKey, out mat);
                dict.TryGetAudioClipTwoDList(audKey, out aud);

                dict.TryGetCustomTwoDList(cusKey, out cus);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            b = GDEDataManager.GetBoolTwoDList(_key, bKey, b);
            i = GDEDataManager.GetIntTwoDList(_key, iKey, i);
            f = GDEDataManager.GetFloatTwoDList(_key, fKey, f);
            s = GDEDataManager.GetStringTwoDList(_key, sKey, s);
            v2 = GDEDataManager.GetVector2TwoDList(_key, v2Key, v2);
            v3 = GDEDataManager.GetVector3TwoDList(_key, v3Key, v3);
            v4 = GDEDataManager.GetVector4TwoDList(_key, v4Key, v4);
            c = GDEDataManager.GetColorTwoDList(_key, cKey, c);
            go = GDEDataManager.GetUnityObjectTwoDList(_key, goKey, go);
            tex = GDEDataManager.GetUnityObjectTwoDList(_key, texKey, tex);
            mat = GDEDataManager.GetUnityObjectTwoDList(_key, matKey, mat);
            aud = GDEDataManager.GetUnityObjectTwoDList(_key, audKey, aud);

            cus = GDEDataManager.GetCustomTwoDList(_key, cusKey, cus);
        }

        public GDETwoDListData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDETwoDListData newClone = new GDETwoDListData(newKey);

            newClone.b = new List<List<bool>>(b);
			newClone.Set_b();
            newClone.i = new List<List<int>>(i);
			newClone.Set_i();
            newClone.f = new List<List<float>>(f);
			newClone.Set_f();
            newClone.s = new List<List<string>>(s);
			newClone.Set_s();
            newClone.v2 = new List<List<Vector2>>(v2);
			newClone.Set_v2();
            newClone.v3 = new List<List<Vector3>>(v3);
			newClone.Set_v3();
            newClone.v4 = new List<List<Vector4>>(v4);
			newClone.Set_v4();
            newClone.c = new List<List<Color>>(c);
			newClone.Set_c();

            Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

            List<List<string>> path2DList;
            dict.TryGetStringTwoDList(goKey, out path2DList);
			GDEDataManager.SetStringTwoDList(newClone.Key, goKey, path2DList);
            newClone.go = new List<List<GameObject>>(go);
			newClone.Set_go();

            dict.TryGetStringTwoDList(texKey, out path2DList);
			GDEDataManager.SetStringTwoDList(newClone.Key, texKey, path2DList);
            newClone.tex = new List<List<Texture2D>>(tex);
			newClone.Set_tex();

            dict.TryGetStringTwoDList(matKey, out path2DList);
			GDEDataManager.SetStringTwoDList(newClone.Key, matKey, path2DList);
            newClone.mat = new List<List<Material>>(mat);
			newClone.Set_mat();

            dict.TryGetStringTwoDList(audKey, out path2DList);
			GDEDataManager.SetStringTwoDList(newClone.Key, audKey, path2DList);
            newClone.aud = new List<List<AudioClip>>(aud);
			newClone.Set_aud();

            newClone.cus = new List<List<GDETwoDListCustomData>>(cus);
			newClone.Set_cus();

            return newClone;
		}

        public GDETwoDListData DeepClone()
		{
			GDETwoDListData newClone = ShallowClone();
            newClone.cus = new List<List<GDETwoDListCustomData>>();
			if (cus != null)
			{
				foreach(var sublist in cus)
				{
					var newSubList = new List<GDETwoDListCustomData>();
					if (sublist != null)
					{
						foreach(var val in sublist)
							newSubList.Add(val.DeepClone());
					}
					newClone.cus.Add(newSubList);
				}
			}
			newClone.Set_cus();
            return newClone;
		}

        public void Reset_b()
        {
	        GDEDataManager.ResetToDefault(_key, bKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetBoolTwoDList(bKey, out b);
        }
		
        public void Reset_i()
        {
	        GDEDataManager.ResetToDefault(_key, iKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntTwoDList(iKey, out i);
        }
		
        public void Reset_f()
        {
	        GDEDataManager.ResetToDefault(_key, fKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetFloatTwoDList(fKey, out f);
        }
		
        public void Reset_s()
        {
	        GDEDataManager.ResetToDefault(_key, sKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetStringTwoDList(sKey, out s);
        }
		
        public void Reset_v2()
        {
	        GDEDataManager.ResetToDefault(_key, v2Key);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetVector2TwoDList(v2Key, out v2);
        }
		
        public void Reset_v3()
        {
	        GDEDataManager.ResetToDefault(_key, v3Key);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetVector3TwoDList(v3Key, out v3);
        }
		
        public void Reset_v4()
        {
	        GDEDataManager.ResetToDefault(_key, v4Key);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetVector4TwoDList(v4Key, out v4);
        }
		
        public void Reset_c()
        {
	        GDEDataManager.ResetToDefault(_key, cKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetColorTwoDList(cKey, out c);
        }
		
        public void Reset_go()
        {
	        GDEDataManager.ResetToDefault(_key, goKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetGameObjectTwoDList(goKey, out go);
        }
		
        public void Reset_tex()
        {
	        GDEDataManager.ResetToDefault(_key, texKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetTexture2DTwoDList(texKey, out tex);
        }
		
        public void Reset_mat()
        {
	        GDEDataManager.ResetToDefault(_key, matKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetMaterialTwoDList(matKey, out mat);
        }
		
        public void Reset_aud()
        {
	        GDEDataManager.ResetToDefault(_key, audKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetAudioClipTwoDList(audKey, out aud);
        }
		

        public void Reset_cus()
		{
			GDEDataManager.ResetToDefault(_key, cusKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomTwoDList(cusKey, out cus);
			cus = GDEDataManager.GetCustomTwoDList(_key, cusKey, cus);

			cus.ForEach(x => x.ForEach(y => y.ResetAll()));
		}

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, bKey);
            GDEDataManager.ResetToDefault(_key, iKey);
            GDEDataManager.ResetToDefault(_key, fKey);
            GDEDataManager.ResetToDefault(_key, sKey);
            GDEDataManager.ResetToDefault(_key, v2Key);
            GDEDataManager.ResetToDefault(_key, v3Key);
            GDEDataManager.ResetToDefault(_key, v4Key);
            GDEDataManager.ResetToDefault(_key, cKey);
            GDEDataManager.ResetToDefault(_key, cusKey);
            GDEDataManager.ResetToDefault(_key, goKey);
            GDEDataManager.ResetToDefault(_key, texKey);
            GDEDataManager.ResetToDefault(_key, matKey);
            GDEDataManager.ResetToDefault(_key, audKey);

            Reset_cus();

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
