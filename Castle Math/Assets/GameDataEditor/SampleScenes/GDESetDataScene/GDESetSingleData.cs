// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Projects/gde_unity_4.5/Assets/GameDataEditor/SampleScenes/GDESetDataScene/Resources/set_data_scene.json
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDESetSingleData : IGDEData
    {
        static string bool_fieldKey = "bool_field";
		bool _bool_field;
        public bool bool_field
        {
            get { return _bool_field; }
            set {
                if (_bool_field != value)
                {
                    _bool_field = value;
					GDEDataManager.SetBool(_key, bool_fieldKey, _bool_field);
                }
            }
        }

        static string int_fieldKey = "int_field";
		int _int_field;
        public int int_field
        {
            get { return _int_field; }
            set {
                if (_int_field != value)
                {
                    _int_field = value;
					GDEDataManager.SetInt(_key, int_fieldKey, _int_field);
                }
            }
        }

        static string float_fieldKey = "float_field";
		float _float_field;
        public float float_field
        {
            get { return _float_field; }
            set {
                if (_float_field != value)
                {
                    _float_field = value;
					GDEDataManager.SetFloat(_key, float_fieldKey, _float_field);
                }
            }
        }

        static string string_fieldKey = "string_field";
		string _string_field;
        public string string_field
        {
            get { return _string_field; }
            set {
                if (_string_field != value)
                {
                    _string_field = value;
					GDEDataManager.SetString(_key, string_fieldKey, _string_field);
                }
            }
        }

        static string vector2_fieldKey = "vector2_field";
		Vector2 _vector2_field;
        public Vector2 vector2_field
        {
            get { return _vector2_field; }
            set {
                if (_vector2_field != value)
                {
                    _vector2_field = value;
					GDEDataManager.SetVector2(_key, vector2_fieldKey, _vector2_field);
                }
            }
        }

        static string vector3_fieldKey = "vector3_field";
		Vector3 _vector3_field;
        public Vector3 vector3_field
        {
            get { return _vector3_field; }
            set {
                if (_vector3_field != value)
                {
                    _vector3_field = value;
					GDEDataManager.SetVector3(_key, vector3_fieldKey, _vector3_field);
                }
            }
        }

        static string vector4_fieldKey = "vector4_field";
		Vector4 _vector4_field;
        public Vector4 vector4_field
        {
            get { return _vector4_field; }
            set {
                if (_vector4_field != value)
                {
                    _vector4_field = value;
					GDEDataManager.SetVector4(_key, vector4_fieldKey, _vector4_field);
                }
            }
        }

        static string color_fieldKey = "color_field";
		Color _color_field;
        public Color color_field
        {
            get { return _color_field; }
            set {
                if (_color_field != value)
                {
                    _color_field = value;
					GDEDataManager.SetColor(_key, color_fieldKey, _color_field);
                }
            }
        }

        static string custom_fieldKey = "custom_field";
		GDESetCustomData _custom_field;
        public GDESetCustomData custom_field
        {
            get { return _custom_field; }
            set {
                if (_custom_field != value)
                {
                    _custom_field = value;
					GDEDataManager.SetCustom(_key, custom_fieldKey, _custom_field);
                }
            }
        }

        public GDESetSingleData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "SetSingle");
			
            dict.Merge(true, bool_field.ToGDEDict(bool_fieldKey));
            dict.Merge(true, int_field.ToGDEDict(int_fieldKey));
            dict.Merge(true, float_field.ToGDEDict(float_fieldKey));
            dict.Merge(true, string_field.ToGDEDict(string_fieldKey));
            dict.Merge(true, vector2_field.ToGDEDict(vector2_fieldKey));
            dict.Merge(true, vector3_field.ToGDEDict(vector3_fieldKey));
            dict.Merge(true, vector4_field.ToGDEDict(vector4_fieldKey));
            dict.Merge(true, color_field.ToGDEDict(color_fieldKey));

            dict.Merge(true, custom_field.ToGDEDict(custom_fieldKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
            GDEDataManager.UpdateItem(custom_field, rebuildKeyList);
            custom_field.UpdateCustomItems(rebuildKeyList);
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(bool_fieldKey, out _bool_field);
                dict.TryGetInt(int_fieldKey, out _int_field);
                dict.TryGetFloat(float_fieldKey, out _float_field);
                dict.TryGetString(string_fieldKey, out _string_field);
                dict.TryGetVector2(vector2_fieldKey, out _vector2_field);
                dict.TryGetVector3(vector3_fieldKey, out _vector3_field);
                dict.TryGetVector4(vector4_fieldKey, out _vector4_field);
                dict.TryGetColor(color_fieldKey, out _color_field);

                string customDataKey;
                dict.TryGetString(custom_fieldKey, out customDataKey);
				_custom_field = new GDESetCustomData(customDataKey);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _bool_field = GDEDataManager.GetBool(_key, bool_fieldKey, _bool_field);
            _int_field = GDEDataManager.GetInt(_key, int_fieldKey, _int_field);
            _float_field = GDEDataManager.GetFloat(_key, float_fieldKey, _float_field);
            _string_field = GDEDataManager.GetString(_key, string_fieldKey, _string_field);
            _vector2_field = GDEDataManager.GetVector2(_key, vector2_fieldKey, _vector2_field);
            _vector3_field = GDEDataManager.GetVector3(_key, vector3_fieldKey, _vector3_field);
            _vector4_field = GDEDataManager.GetVector4(_key, vector4_fieldKey, _vector4_field);
            _color_field = GDEDataManager.GetColor(_key, color_fieldKey, _color_field);

            _custom_field = GDEDataManager.GetCustom(_key, custom_fieldKey, _custom_field);
        }

        public GDESetSingleData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDESetSingleData newClone = new GDESetSingleData(newKey);

            newClone.bool_field = bool_field;
            newClone.int_field = int_field;
            newClone.float_field = float_field;
            newClone.string_field = string_field;
            newClone.vector2_field = vector2_field;
            newClone.vector3_field = vector3_field;
            newClone.vector4_field = vector4_field;
            newClone.color_field = color_field;

            newClone.custom_field = custom_field;

            return newClone;
		}

        public GDESetSingleData DeepClone()
		{
			GDESetSingleData newClone = ShallowClone();
            newClone.custom_field = custom_field.DeepClone();
            return newClone;
		}

        public void Reset_bool_field()
        {
            GDEDataManager.ResetToDefault(_key, bool_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(bool_fieldKey, out _bool_field);
        }

        public void Reset_int_field()
        {
            GDEDataManager.ResetToDefault(_key, int_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(int_fieldKey, out _int_field);
        }

        public void Reset_float_field()
        {
            GDEDataManager.ResetToDefault(_key, float_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(float_fieldKey, out _float_field);
        }

        public void Reset_string_field()
        {
            GDEDataManager.ResetToDefault(_key, string_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(string_fieldKey, out _string_field);
        }

        public void Reset_vector2_field()
        {
            GDEDataManager.ResetToDefault(_key, vector2_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetVector2(vector2_fieldKey, out _vector2_field);
        }

        public void Reset_vector3_field()
        {
            GDEDataManager.ResetToDefault(_key, vector3_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetVector3(vector3_fieldKey, out _vector3_field);
        }

        public void Reset_vector4_field()
        {
            GDEDataManager.ResetToDefault(_key, vector4_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetVector4(vector4_fieldKey, out _vector4_field);
        }

        public void Reset_color_field()
        {
            GDEDataManager.ResetToDefault(_key, color_fieldKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetColor(color_fieldKey, out _color_field);
        }

        public void Reset_custom_field()
		{
			GDEDataManager.ResetToDefault(_key, custom_fieldKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(custom_fieldKey, out customDataKey);
			_custom_field = new GDESetCustomData(customDataKey);

			custom_field.ResetAll();
		}

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, bool_fieldKey);
            GDEDataManager.ResetToDefault(_key, int_fieldKey);
            GDEDataManager.ResetToDefault(_key, float_fieldKey);
            GDEDataManager.ResetToDefault(_key, string_fieldKey);
            GDEDataManager.ResetToDefault(_key, vector2_fieldKey);
            GDEDataManager.ResetToDefault(_key, vector3_fieldKey);
            GDEDataManager.ResetToDefault(_key, vector4_fieldKey);
            GDEDataManager.ResetToDefault(_key, color_fieldKey);
            GDEDataManager.ResetToDefault(_key, custom_fieldKey);

            Reset_custom_field();

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
