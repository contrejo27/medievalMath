// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Users/ericpeterford/Documents/UnityProjects/MedievalMath/Castle Math/Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDELoginsData : IGDEData
    {
        static string EmailKey = "Email";
		string _Email;
        public string Email
        {
            get { return _Email; }
            set {
                if (_Email != value)
                {
                    _Email = value;
					GDEDataManager.SetString(_key, EmailKey, _Email);
                }
            }
        }

        static string PasswordKey = "Password";
		string _Password;
        public string Password
        {
            get { return _Password; }
            set {
                if (_Password != value)
                {
                    _Password = value;
					GDEDataManager.SetString(_key, PasswordKey, _Password);
                }
            }
        }

        public GDELoginsData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Logins");
			
            dict.Merge(true, Email.ToGDEDict(EmailKey));
            dict.Merge(true, Password.ToGDEDict(PasswordKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(EmailKey, out _Email);
                dict.TryGetString(PasswordKey, out _Password);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _Email = GDEDataManager.GetString(_key, EmailKey, _Email);
            _Password = GDEDataManager.GetString(_key, PasswordKey, _Password);
        }

        public GDELoginsData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDELoginsData newClone = new GDELoginsData(newKey);

            newClone.Email = Email;
            newClone.Password = Password;

            return newClone;
		}

        public GDELoginsData DeepClone()
		{
			GDELoginsData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_Email()
        {
            GDEDataManager.ResetToDefault(_key, EmailKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(EmailKey, out _Email);
        }

        public void Reset_Password()
        {
            GDEDataManager.ResetToDefault(_key, PasswordKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(PasswordKey, out _Password);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, EmailKey);
            GDEDataManager.ResetToDefault(_key, PasswordKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
